name: Terraform Deployment with Unit Test Task

on:
  push:
    branches:
      - none
  workflow_dispatch:
    inputs:
      resourcetype:
        description: 'resourcetype to deploy (e.g., VM , Webapp)'
        required: true
        default: 'vm'
      environment:
        description: 'Environment to deploy (e.g., dev, prod)'
        required: false
        default: 'dev'

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ${{ github.workspace }}/${{ github.event.inputs.resourcetype }}/modules/${{ github.event.inputs.resourcetype }}
      GO_VERSION: '1.21.0'
      TF_VERSION: '1.3.5'

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: List the contents of the working directory
    - name: List Working Directory
      run: |
        echo "Listing the contents of the working directory..."
        ls -al $GITHUB_WORKSPACE

    # Step 3: Azure Login
    - name: Setup Azure Login using Service Principal
      run: |
        az login --service-principal \
            -u a2d89136-b086-4755-9f98-af856c2d8c30 \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant 13085c86-4bcb-460a-a6f0-b373421c6323

    - name: Retrieve secret from Azure Key Vault
      id: get_secret
      run: |
        secret_value=$(az keyvault secret show --name ${{ secrets.clientsecret }} --vault-name ${{ secrets.GitHubKVault }} --query value -o tsv)
        echo "SECRET_VALUE=$secret_value" >> $GITHUB_ENV

    - name: Use the secret value
      run: |
        echo "The secret value is: ${{ env.SECRET_VALUE }}"

    # Step 4: Set up Go
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}

    # Step 5: Install Terraform
    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Step 6: Clean Go cache
    - name: Clean Go Cache
      run: |
        echo "Cleaning Go Cache..."
        go clean -modcache

    # Step 7: Initialize Terraform
    - name: Terraform Init
      run: |
        terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade

    # Step 8: Validate Terraform configuration
    - name: Terraform Validate
      run: |
        terraform -chdir=${{ env.TF_WORKING_DIR }} validate

    # Step 9: Run Unit Tests with Terratest
    - name: Run Unit Tests with Terratest
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        export TF_VAR_ENV="${{ github.event.inputs.environment }}"
        go test -v

    # Step 10: Terraform Plan
    - name: Terraform Plan
      run: |
        ENV_TFVARS="${{ github.event.inputs.resourcetype }}/environments/${{ github.event.inputs.environment }}/terraform.tfvars"
        echo "Using tfvars file: ${ENV_TFVARS}"
        terraform -chdir=${{ env.TF_WORKING_DIR }} plan -out=tfplan -var-file=${{ github.workspace }}/${ENV_TFVARS}

    # Step 11: Apply Terraform Plan
    - name: Terraform Apply
      run: |
        ENV_TFVARS="${{ github.event.inputs.resourcetype }}/environments/${{ github.event.inputs.environment }}/terraform.tfvars"
        terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve -var-file=${{ github.workspace }}/${ENV_TFVARS}

    # Step 12: Remove terraform.lock.hcl
    - name: Remove terraform.lock.hcl
      run: |
        rm -f ${{ env.TF_WORKING_DIR }}/terraform.lock.hcl
