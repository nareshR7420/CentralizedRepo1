name: Create pipeline in application repo

on:
  workflow_dispatch:
    inputs:
      orgname:
        description: 'The name of the organization repository'
        required: true
        type: string
      targetrepo:
        description: 'The name of the target repository for triggering workflows'
        required: true
        type: string
      applicationtype:
        description: 'The Application type for deployment (dotnet, springboot)'
        required: true
        type: string
      appname:
        description: 'The Azure Web App name for deployment'
        required: true
        type: string

jobs:
  trigger-workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Create target repository if it doesn't exist
        run: |
          echo "Checking if the repository ${{ github.event.inputs.targetrepo }} exists in ${{ github.event.inputs.orgname }}..."
          
          # Check if repository exists using GitHub API
          repo_exists=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/user/repos)
          
          if [ "$repo_exists" != "200" ]; then
            echo "Repository doesn't exist. Creating new repository..."
            
            # Creating new repository via GitHub API
            response=$(curl -s -w "%{http_code}" -o response.json -X POST https://api.github.com/user/repos \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -d '{
              "name": "${{ github.event.inputs.targetrepo }}",
              "description": "This is your target repository",
              "homepage": "https://github.com",
              "private": false,
              "has_issues": false,
              "has_projects": false,
              "has_wiki": false
            }')
      
            # Print the HTTP response code and body for debugging
            echo "Response Code: $response"
            echo "Response Body:"
            cat response.json
            
            # Check if the creation was successful (HTTP status code 201 means created)
            if [ "$response" -eq "201" ]; then
              echo "Repository ${{ github.event.inputs.targetrepo }} created successfully."
            else
              echo "Failed to create repository. Please check the error details."
              cat response.json
            fi
          else
            echo "Repository ${{ github.event.inputs.targetrepo }} already exists."
          fi

      - name: Checkout CentralizedRepo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.orgname }}/CentralizedRepo
          token: ${{ secrets.GIT_PAT }}  # Personal Access Token (PAT)
          ref: main

      - name: Clone the target repository
        run: |
          # Ensure that git is available
          git --version

          # Clone the target repository into the directory you want
          git clone https://github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git
          
          # Navigate into the cloned repository
          cd ${{ github.event.inputs.targetrepo }}
          
          # List the contents of the cloned repository
          echo "Contents of the cloned repository:"
          ls -R .

      - name: List files in the app repo
        run: |
          echo "Listing files in the app repo"
          ls -R .  # List all files in the current directory (root of the checked-out repo)

      - name: List files in the app repo's workflows directory
        run: |
          echo "Listing files in the app repo's workflows directory"
          ls -R ${{ github.event.inputs.targetrepo }}/.github/workflows || echo "Directory not found"

      - name: Create .github/workflows directory in app repo if it doesn't exist
        run: |
          if [ ! -d "${{ github.event.inputs.targetrepo }}/.github/workflows" ]; then
            echo "Creating .github/workflows directory."
            mkdir -p ${{ github.event.inputs.targetrepo }}/.github/workflows
          fi

      - name: Check if the required YAML file exists in the app repo
        run: |
          echo "Checking for ${{ github.event.inputs.applicationtype }}.yaml"
          if [ ! -f ".github/workflows/${{ github.event.inputs.applicationtype }}.yaml" ]; then
            echo "Error: ${{ github.event.inputs.applicationtype }}.yaml does not exist in the app repo!"
            exit 1
          fi

      - name: Copy the application workflow YAML file to app repo
        run: |
          echo "Copying the application workflow YAML to the app repo."
          cp .github/workflows/${{ github.event.inputs.applicationtype }}.yaml ${{ github.event.inputs.targetrepo }}/.github/workflows/
          git diff --exit-code || echo "Changes detected, committing."
          
          cd ${{ github.event.inputs.targetrepo }}
          git config --global user.email "naresh.reddivari@valuemomentum.com"
          git config --global user.name "nareshreddivari"
          git add .github/workflows/${{ github.event.inputs.applicationtype }}.yaml
          
          git diff --cached --quiet || git commit -m "Added ${{ github.event.inputs.applicationtype }}.yaml from App repo"
          
          # Use PAT for git push
          git push https://${{ secrets.GIT_PAT }}@github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git main || echo "No changes to push."

      - name: Copy application code to the app repo (based on application type)
        run: |
          # Ensure the folder path is created in the target repository
          if [ "${{ github.event.inputs.applicationtype }}" == "dotnet" ]; then
            echo "Copying .NET (calculator) code to the app repo."
            
            # Debug: Check the current working directory
            echo "Current directory:"
            pwd
      
            # Debug: List contents of the current directory
            echo "Listing contents of the current directory:"
            ls -l
          
            # Ensure you're in the correct directory (CentralizedRepo Repos is already included in GITHUB_WORKSPACE)
            cd $GITHUB_WORKSPACE  # No need to go into CentralizedRepo Repos again since it's already in the path
      
            # Check if the calculator folder exists in the correct path and list its contents
            if [ -d "./calculator" ]; then
              echo "Listing contents of the calculator folder (before copy):"
              mkdir -p ${{ github.event.inputs.targetrepo }}/calculator
              ls -l ./calculator
              cp -r ./calculator/* ${{ github.event.inputs.targetrepo }}/calculator/
            else
              echo "calculator folder does not exist in the expected location. Skipping copy."
            fi
      
            # Check if calculator.sln file exists in CentralizedRepo root and copy it
            if [ -f "./calculator.sln" ]; then
              echo "calculator.sln file exists, copying to app repo."
              cp ./calculator.sln ${{ github.event.inputs.targetrepo }}/calculator.sln
            else
              echo "calculator.sln file does not exist, skipping copy."
            fi
          
          elif [ "${{ github.event.inputs.applicationtype }}" == "springboot" ]; then
            echo "Copying Spring Boot code to the app repo."
            # Change to the correct directory (CentralizedRepo without the extra "CentralizedRepo")
            cd $GITHUB_WORKSPACE  # No need to change directory here either
          
            # Create the springboot folder if it doesn't exist
            mkdir -p ${{ github.event.inputs.targetrepo }}/springboot
            # Copy the Spring Boot code from CentralizedRepo to the target repo
            cp -r ./springboot/* ${{ github.event.inputs.targetrepo }}/springboot/  
        
          fi
          
          git diff --exit-code || echo "Changes detected, committing."
          
          cd ${{ github.event.inputs.targetrepo }}
          git config --global user.email "naresh.reddivari@valuemomentum.com"
          git config --global user.name "nareshreddivari"
          git add .
          
          git diff --cached --quiet || git commit -m "Added application code from App repo"
          
          # Use PAT for git push
          git push https://${{ secrets.GIT_PAT }}@github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git main || echo "No changes to push."

      # Step: Get the encrypted secret from CentralizedRepo
      - name: Get Azure Credentials from CentralizedRepo
        id: get_secret
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}  # Ensure GIT_PAT is available as an env variable
        run: |
          encrypted_value=$(curl -H "Authorization: Bearer $GIT_PAT" \
            -X GET "https://api.github.com/repos/${{ github.event.inputs.orgname }}/CentralizedRepo/actions/secrets/AZURE_CREDENTIALS" \
            | jq -r '.encrypted_value')
          echo "encrypted_value=$encrypted_value" >> $GITHUB_ENV

      # Step : Get the public key from the target repo to encrypt the secret
      - name: Get public key for target repo
        id: get_public_key
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}  # Ensure GIT_PAT is available as an env variable
        run: |
          key_id=$(curl -H "Authorization: Bearer $GIT_PAT" \
            -X GET "https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/secrets/public-key" \
            | jq -r '.key_id')
          echo "key_id=$key_id" >> $GITHUB_ENV

      # Step : Set the secret in the target repo
      - name: Set Azure Credentials in Target Repo
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -X PUT "https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/secrets/AZURE_CREDENTIALS" \
            -d '{"encrypted_value": "${{ env.encrypted_value }}", "key_id": "${{ env.key_id }}"}'

      - name: Trigger pipeline in the application repo
        run: |
          echo "Triggering workflow in target application repo."
          curl -X POST \
            https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/workflows/${{ github.event.inputs.applicationtype }}.yaml/dispatches \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -d '{"ref":"main","inputs":{"appname":"${{ github.event.inputs.appname }}"}}'
